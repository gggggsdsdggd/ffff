-- Load CompKiller UI
local success, Compkiller = pcall(function()
    return loadstring(
        game:HttpGet(
            'https://raw.githubusercontent.com/4lpaca-pin/CompKiller/refs/heads/main/src/source.luau'
        )
    )()
end)

if not success then
    warn('[ERROR] Failed to load CompKiller UI: ' .. tostring(Compkiller))
    return
end

-- Create Config Manager
local ConfigManager = Compkiller:ConfigManager({
    Directory = 'Compkiller-UI',
    Config = 'ZeeHood-Configs',
})

-- Keybind Management
local Keybinds = {
    TargetLock = Enum.KeyCode.Q,
    TPWalk = Enum.KeyCode.Z,
    ForceHit = Enum.KeyCode.T,
}

-- Create Window
local Window = Compkiller.new({
    Name = 'ZEE HOOD',
    Keybind = Enum.KeyCode.LeftControl,
    Logo = 'rbxassetid://16767007721',
    Scale = Compkiller.Scale.Window,
    TextSize = 15,
})

-- Tabs
local MainTab = Window:DrawTab({
    Icon = Compkiller:_GetIcon('star'),
    Name = 'Main',
    Type = 'Single',
    EnableScrolling = true,
})

local MovementTab = Window:DrawTab({
    Icon = 'rbxassetid://9657060536',
    Name = 'Movement',
    Type = 'Single',
    EnableScrolling = true,
})

local VisualsTab = Window:DrawTab({
    Icon = Compkiller:_GetIcon('eye'),
    Name = 'Visuals',
    Type = 'Single',
    EnableScrolling = true,
})

local RageTab = Window:DrawTab({
    Icon = Compkiller:_GetIcon('crosshairs'),
    Name = 'Rage',
    Type = 'Single',
    EnableScrolling = true,
})

local SettingsTab = Window:DrawTab({
    Icon = Compkiller:_GetIcon('settings-3'),
    Name = 'Settings',
    Type = 'Single',
    EnableScrolling = true,
})

local ThemeTab = Window:DrawTab({
    Icon = Compkiller:_GetIcon('paintbrush'),
    Name = 'Themes',
    Type = 'Single',
})

-- Sections
local TargetAimSection = MainTab:DrawSection({
    Name = 'Target Aim',
    Icon = Compkiller:_GetIcon('crosshairs'),
})

local TargetVisualsSection = MainTab:DrawSection({
    Name = 'Target Visuals',
    Icon = Compkiller:_GetIcon('palette'),
})

local RageSection = RageTab:DrawSection({
    Name = 'Rage Features',
    Icon = Compkiller:_GetIcon('crosshairs'),
})

local MovementSection = MovementTab:DrawSection({
    Name = 'TP Walk',
    Icon = Compkiller:_GetIcon('walking'),
})

local BeamVisualsSection = VisualsTab:DrawSection({
    Name = 'Beam Visuals',
    Icon = Compkiller:_GetIcon('lightbulb'),
})

local SettingsSection = SettingsTab:DrawSection({
    Name = 'UI Settings',
})

local ThemeSection = ThemeTab:DrawSection({
    Name = 'UI Themes',
})

-- Custom Label Creation
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild('PlayerGui')
local ScreenGui = Instance.new('ScreenGui')
ScreenGui.Name = 'ZeeHoodSettings'
ScreenGui.Parent = PlayerGui
ScreenGui.ResetOnSpawn = false

local labelOffsetY = 0
local function CreateLabel(section, text)
    local label = Instance.new('TextLabel')
    label.Text = text
    label.TextSize = 15
    label.TextColor3 = Color3.new(1, 1, 1)
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Position = UDim2.new(0, 0, 0, labelOffsetY)
    label.Parent = ScreenGui
    labelOffsetY = labelOffsetY + 25
    return label
end

-- Keybind Labels
local TargetLockKeyLabel = CreateLabel(
    SettingsSection,
    'Target Lock Key: ' .. Keybinds.TargetLock.Name
)
local TPWalkKeyLabel =
    CreateLabel(SettingsSection, 'TP Walk Key: ' .. Keybinds.TPWalk.Name)
local ForceHitKeyLabel =
    CreateLabel(SettingsSection, 'Force Hit Key: ' .. Keybinds.ForceHit.Name)

-- Color Pickers for UI Customization
local colors = {
    { 'Highlight', Compkiller.Colors.Highlight },
    { 'Toggle Color', Compkiller.Colors.Toggle },
    { 'Drop Color', Compkiller.Colors.DropColor },
    { 'Risky', Compkiller.Colors.Risky },
    { 'Mouse Enter', Compkiller.Colors.MouseEnter },
    { 'Block Color', Compkiller.Colors.BlockColor },
    { 'Background Color', Compkiller.Colors.BGDBColor },
    { 'Block Background Color', Compkiller.Colors.BlockBackground },
    { 'Stroke Color', Compkiller.Colors.StrokeColor },
    { 'High Stroke Color', Compkiller.Colors.HighStrokeColor },
    { 'Switch Color', Compkiller.Colors.SwitchColor },
    { 'Line Color', Compkiller.Colors.LineColor },
}

for _, v in ipairs(colors) do
    SettingsSection:AddColorPicker({
        Name = v[1],
        Default = v[2],
        Callback = function(val)
            Compkiller.Colors[v[1]:gsub(' ', '')] = val
            Compkiller:RefreshCurrentColor(val)
        end,
    })
end

SettingsSection:AddButton({
    Name = 'Get Theme',
    Callback = function()
        print(Compkiller:GetTheme())
    end,
})

-- Theme Dropdown
ThemeSection:AddDropdown({
    Name = 'Select Theme',
    Default = 'Default',
    Values = { 'Default', 'Dark Green', 'Dark Blue', 'Purple Rose', 'Skeet' },
    Callback = function(v)
        Compkiller:SetTheme(v)
    end,
})

-- Config Tab
local ConfigUI = Window:DrawConfig({
    Name = 'Config',
    Icon = Compkiller:_GetIcon('folder'),
    Config = ConfigManager,
})

ConfigUI:Init()

-- Services and Variables
local StarterGui = game:GetService('StarterGui')
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local CurrentCamera = workspace.CurrentCamera
local Inset = game:GetService('GuiService'):GetGuiInset().Y
local Client = Players.LocalPlayer
local Mouse = Client:GetMouse()

local DEBUG_MODE = false
local SEND_NOTIFICATIONS = false
local Target = nil
local ForceHitTarget = nil
local TargetPart = 'Head'
local BulletTPEnabled = false
local BulletSpeed = 300
local LeadStrength = 0.1
local TracerEnabled = true
local TracerRGBEffectEnabled = false
local ViewEnabled = false
local FOVEnabled = false
local FOVRGBEnabled = false
local RapidFireEnabled = false
local TargetAll = false
local mouseHeld = false
local PatchedGuns = {}
local GunMaids = {}
local BeamVisualsEnabled = false
local BeamColor = Color3.fromRGB(128, 0, 255)
local HitChamColor = Color3.fromRGB(175, 25, 255)
local HitChamMaterial = Enum.Material.Neon
local currentText = ''
local textIndex = 1
local lastTextUpdate = 0
local textUpdateDelay = 0.1
local tpWalkEnabled = false
local tpwalking = false
local tpWalkSpeed = 10
local ForceHitEnabled = false
local HitChamsEnabled = false
local ChamFadeTime = 2.4
local hitSoundId = 'rbxassetid://6607113255'
local tracerLine = nil
local lastShotTime = 0
local HIT_DETECTION_WINDOW = 0.5

local Settings = {
    Aimpart = 'Head',
    Prediction = LeadStrength,
    Thickness = 3.5,
    Transparency = 1,
    Color = Color3.fromRGB(153, 50, 204),
    FOVRadius = 60,
    FOVThickness = 1.5,
    HitChamMaterial = 'Neon',
}

local GUN_NAMES = {
    ['[Revolver]'] = true,
    ['[Double-Barrel SG]'] = true,
    ['[TacticalShotgun]'] = true,
    ['[SMG]'] = true,
}

local RapidFire = {
    InfiniteAmmo = 999999,
    FireRate = 0.05,
    BulletsPerShot = 5,
    SpreadAmount = 10,
    InfiniteRange = 999999,
}

local Line = Drawing.new('Line')
local Circle = Drawing.new('Circle')
Circle.Filled = false
local Text = Drawing.new('Text')

local BodyParts = {
    'Head',
    'UpperTorso',
    'LowerTorso',
    'LeftUpperArm',
    'LeftLowerArm',
    'LeftHand',
    'RightUpperArm',
    'RightLowerArm',
    'RightHand',
    'LeftUpperLeg',
    'LeftLowerLeg',
    'LeftFoot',
    'RightUpperLeg',
    'RightLowerLeg',
    'RightFoot',
}

-- Notification Function
local function notify(title, text, dur)
    if SEND_NOTIFICATIONS then
        pcall(function()
            StarterGui:SetCore('SendNotification', {
                Title = title,
                Text = text,
                Duration = dur or 3,
            })
        end)
    end
end

-- Debug Function
local function dbgWarn(msg)
    if DEBUG_MODE then
        warn('[DEBUG] ' .. tostring(msg))
    end
end

-- Tracer Helper for Force Hit
local function createTracer()
    if tracerLine then
        tracerLine:Remove()
    end
    tracerLine = Drawing.new('Line')
    tracerLine.Color = Color3.new(1, 0, 0)
    tracerLine.Thickness = 2
    tracerLine.Visible = false
end

local function updateTracer()
    if not (ForceHitEnabled and ForceHitTarget and tracerLine) then
        if tracerLine then
            tracerLine.Visible = false
        end
        return
    end

    local localChar = LocalPlayer.Character
    local targetChar = ForceHitTarget.Character
    if not localChar or not targetChar then
        tracerLine.Visible = false
        return
    end

    local cam = workspace.CurrentCamera
    local localHead = localChar:FindFirstChild('Head')
    local targetHead = targetChar:FindFirstChild('Head')

    if localHead and targetHead then
        local fromPos, onScreen1 = cam:WorldToViewportPoint(localHead.Position)
        local toPos, onScreen2 = cam:WorldToViewportPoint(targetHead.Position)
        if onScreen1 and onScreen2 then
            tracerLine.From = Vector2.new(fromPos.X, fromPos.Y)
            tracerLine.To = Vector2.new(toPos.X, toPos.Y)
            tracerLine.Visible = true
        else
            tracerLine.Visible = false
        end
    else
        tracerLine.Visible = false
    end
end

local function removeTracer()
    if tracerLine then
        tracerLine:Remove()
        tracerLine = nil
    end
end

-- Hit Sound
local function playHitSound()
    local head = LocalPlayer.Character
        and LocalPlayer.Character:FindFirstChild('Head')
    if head then
        local sound = Instance.new('Sound')
        sound.SoundId = hitSoundId
        sound.Volume = 1
        sound.Parent = head
        sound:Play()
        game.Debris:AddItem(sound, 2)
    end
end

-- Hit Chams Creation
local function createHitCham(targetChar)
    if not targetChar or not HitChamsEnabled or not targetChar:IsDescendantOf(workspace) then
        return
    end

    local chamModel = Instance.new('Model')
    chamModel.Name = 'HitCham'
    chamModel.Parent = workspace

    for _, partName in ipairs(BodyParts) do
        local part = targetChar:FindFirstChild(partName)
        if part and part:IsA('BasePart') then
            local chamPart = Instance.new('Part')
            chamPart.Size = part.Size
            chamPart.CFrame = part.CFrame
            chamPart.Anchored = true
            chamPart.CanCollide = false
            chamPart.Material = HitChamMaterial
            chamPart.Color = HitChamColor
            chamPart.Transparency = 0.5
            chamPart.Parent = chamModel
        end
    end

    if #chamModel:GetChildren() == 0 then
        chamModel:Destroy()
        return
    end

    local startTime = tick()
    local conn
    conn = RunService.RenderStepped:Connect(function()
        local elapsed = tick() - startTime
        if elapsed >= ChamFadeTime then
            chamModel:Destroy()
            conn:Disconnect()
        else
            local t = elapsed / ChamFadeTime
            for _, p in ipairs(chamModel:GetChildren()) do
                if p:IsA('BasePart') then
                    p.Transparency = 0.5 + 0.5 * t
                end
            end
        end
    end)
    dbgWarn('Created HitCham for ' .. (targetChar.Name or 'unknown') .. ' with material: ' .. tostring(HitChamMaterial))
end

-- Fire Gun for Force Hit
local function fireGun()
    if not ForceHitEnabled or not ForceHitTarget then
        return
    end
    local char = LocalPlayer.Character
    local targetChar = ForceHitTarget.Character
    if not (char and targetChar) then
        return
    end
    local tool = char:FindFirstChildWhichIsA('Tool')
    if not tool or not tool:FindFirstChild('Handle') then
        return
    end

    local handle = tool.Handle
    local muzzle = handle:FindFirstChild('Muzzle')
        or { WorldPosition = (handle.CFrame * CFrame.new(-1, 0.4, 0)).Position }
    local targetHead = targetChar:FindFirstChild('Head')
    if not targetHead or not muzzle.WorldPosition then
        return
    end

    local mainRemotes = ReplicatedStorage:FindFirstChild('MainRemotes')
    local mainRemoteEvent = mainRemotes
        and mainRemotes:FindFirstChild('MainRemoteEvent')
    if mainRemoteEvent then
        local offset = Vector3.new(
            math.random(-5, 5) / 100,
            math.random(-5, 5) / 100,
            math.random(-5, 5) / 100
        )
        mainRemoteEvent:FireServer(
            'ShootGun',
            handle,
            muzzle.WorldPosition,
            targetHead.Position + offset,
            targetHead,
            Vector3.new(0, 0, 0)
        )
        lastShotTime = tick()
        playHitSound()
        if HitChamsEnabled then
            createHitCham(targetChar)
        end
    end
end

-- Adonis Bypass
local HookedFunctions = {}
local DetectedFunc, KillFunc

pcall(function()
    setthreadidentity(2)
end)

for _, obj in ipairs(getgc(true)) do
    if typeof(obj) == 'table' then
        local detect = rawget(obj, 'Detected')
        local kill = rawget(obj, 'Kill')
        if typeof(detect) == 'function' and not DetectedFunc then
            DetectedFunc = detect
            local old
            old = hookfunction(detect, function(action, info, noCrash)
                if action ~= '_' then
                    dbgWarn(
                        `Adonis flag blocked | Method: {action} | Info: {info}`
                    )
                end
                return true
            end)
            table.insert(HookedFunctions, DetectedFunc)
        end
        if
            rawget(obj, 'Variables')
            and rawget(obj, 'Process')
            and typeof(kill) == 'function'
            and not KillFunc
        then
            KillFunc = kill
            local old
            old = hookfunction(kill, function(info)
                dbgWarn(`Adonis kill attempt blocked | Info: {info}`)
            end)
            table.insert(HookedFunctions, KillFunc)
        end
        local indexInstance = rawget(obj, 'indexInstance')
        if typeof(indexInstance) == 'table' and indexInstance[1] == 'kick' then
            setreadonly(obj, false)
            setreadonly(indexInstance, false)
            rawset(obj, 'Table', {
                'kick',
                function()
                    coroutine.yield()
                end,
            })
            dbgWarn('Mutated indexInstance to block kick communication')
        end
    end
end

do
    local old
    old = hookfunction(
        getrenv().debug.info,
        newcclosure(function(...)
            local a, b = ...
            if DetectedFunc and a == DetectedFunc then
                dbgWarn('Blocked Adonis debug.info sanity check')
                return coroutine.yield(coroutine.running())
            end
            return old(...)
        end)
    )
end

do
    local old
    old = hookmetamethod(game, '__namecall', function(self, ...)
        local method = getnamecallmethod()
        local args = { ... }
        if
            method == 'FireServer'
            and self.Name == 'RemoteEvent'
            and args[1] == 'Shoot'
            and BulletTPEnabled
            and not RapidFireEnabled
            and not TargetAll
            and Target
            and Target.Character
        then
            lastShotTime = tick()
            dbgWarn('Shot fired in Target Aim on ' .. Target.Name)
        end
        if
            method == 'FireServer'
            and self.Name == 'RemoteEvent'
            and args[1] == 'Shoot'
            and (RapidFireEnabled or TargetAll)
        then
            dbgWarn(
                'Blocked default RemoteEvent:FireServer for Shoot to prevent duplicate firing'
            )
            return
        end
        if typeof(method) == 'string' and method:lower() == 'kick' then
            notify('Anti-Kick', 'Kick attempt blocked', 3)
            return nil
        end
        return old(self, ...)
    end)
end

-- Hit Detection for Target Aim and Force Hit
local function setupHitDetection()
    local function connectHealthMonitor(player)
        if
            (player == Target or player == ForceHitTarget) and player.Character
        then
            local humanoid = player.Character:FindFirstChildOfClass('Humanoid')
            if humanoid then
                local lastHealth = humanoid.Health
                local connection
                connection = humanoid.HealthChanged:Connect(function(newHealth)
                    if
                        HitChamsEnabled
                        and (BulletTPEnabled or ForceHitEnabled)
                        and not RapidFireEnabled
                        and not TargetAll
                        and (player == Target or player == ForceHitTarget)
                        and newHealth < lastHealth
                        and (tick() - lastShotTime) <= HIT_DETECTION_WINDOW
                    then
                        createHitCham(player.Character)
                        notify(
                            'Hit Chams',
                            'Hit detected on ' .. player.Name,
                            3
                        )
                        dbgWarn(
                            'Hit detected on '
                                .. player.Name
                                .. ', triggering chams'
                        )
                    end
                    lastHealth = newHealth
                end)
                local cleanup
                cleanup = Players.PlayerRemoving:Connect(function(p)
                    if p == player then
                        connection:Disconnect()
                        cleanup:Disconnect()
                    end
                end)
                local targetChange
                targetChange = RunService.Heartbeat:Connect(function()
                    if Target ~= player and ForceHitTarget ~= player then
                        connection:Disconnect()
                        cleanup:Disconnect()
                        targetChange:Disconnect()
                    end
                end)
            end
        end
    end

    local lastTarget = nil
    local lastForceHitTarget = nil
    RunService.Heartbeat:Connect(function()
        if Target ~= lastTarget or ForceHitTarget ~= lastForceHitTarget then
            if Target then
                connectHealthMonitor(Target)
            end
            if ForceHitTarget then
                connectHealthMonitor(ForceHitTarget)
            end
            lastTarget = Target
            lastForceHitTarget = ForceHitTarget
        end
    end)
end

task.spawn(setupHitDetection)

pcall(function()
    setthreadidentity(7)
end)
notify('Adonis Bypass', 'Script loaded successfully', 4)
dbgWarn(`Hooked {#HookedFunctions} Adonis functions`)

-- Beam Visuals Section
BeamVisualsSection:AddToggle({
    Name = 'Beam Tracers',
    Default = false,
    Callback = function(state)
        BeamVisualsEnabled = state
        notify('Beam Visuals', state and 'Enabled' or 'Disabled', 3)
        dbgWarn('Beam Visuals toggled: ' .. tostring(state))
    end,
})

BeamVisualsSection:AddColorPicker({
    Name = 'Beam Color',
    Default = Color3.fromRGB(128, 0, 255),
    Callback = function(value)
        BeamColor = value
        notify('Beam Visuals', 'Color updated to: ' .. tostring(value), 3)
        dbgWarn('Beam color updated to: ' .. tostring(value))
    end,
})

-- Rage Section (Force Hit and Hit Chams)
RageSection:AddToggle({
    Name = 'Force Hit',
    Default = false,
    Callback = function(state)
        ForceHitEnabled = state
        ForceHitTarget = nil
        if not state then
            removeTracer()
            notify('Force Hit', 'Disabled', 3)
        else
            createTracer()
            notify('Force Hit', 'Enabled (Press T to lock)', 3)
        end
        dbgWarn('Force Hit toggled: ' .. tostring(state))
    end,
})

RageSection:AddToggle({
    Name = 'Hit Chams',
    Default = false,
    Callback = function(state)
        HitChamsEnabled = state
        notify('Hit Chams', state and 'Enabled' or 'Disabled', 3)
        dbgWarn('Hit Chams toggled: ' .. tostring(state))
    end,
})

RageSection:AddColorPicker({
    Name = 'Hit Cham Color',
    Default = Color3.fromRGB(175, 25, 255),
    Callback = function(value)
        HitChamColor = value
        notify('Hit Chams', 'Color updated to: ' .. tostring(value), 3)
        dbgWarn('Hit Cham color updated to: ' .. tostring(value))
    end,
})

RageSection:AddDropdown({
    Name = 'Hit Cham Material',
    Default = 'Neon',
    Values = { 'ForceField', 'Neon' },
    Callback = function(value)
        HitChamMaterial = Enum.Material[value]
        Settings.HitChamMaterial = value
        notify('Hit Chams', 'Material set to: ' .. value, 3)
        dbgWarn('Hit Cham material set to: ' .. value)
    end,
})

RageSection:AddButton({
    Name = 'Set Force Hit Key (Press a key after clicking)',
    Callback = function()
        local listening = true
        notify('Force Hit Key', 'Press a key to set...', 5)
        local connection
        connection = UserInputService.InputBegan:Connect(
            function(input, processed)
                if
                    processed
                    or input.UserInputType ~= Enum.UserInputType.Keyboard
                    or not listening
                then
                    return
                end
                listening = false
                Keybinds.ForceHit = input.KeyCode
                ForceHitKeyLabel.Text = 'Force Hit Key: ' .. input.KeyCode.Name
                dbgWarn('Force Hit key set to: ' .. input.KeyCode.Name)
                connection:Disconnect()
            end
        )
    end,
})

-- Target Aim Section
TargetAimSection:AddToggle({
    Name = 'Target Aim',
    Default = false,
    Callback = function(state)
        BulletTPEnabled = state
        Target = nil
        TargetAll = false
        if not state then
            Line.Visible = false
            Circle.Visible = false
            Text.Visible = false
            ViewEnabled = false
            CurrentCamera.CameraSubject = Client.Character
                and Client.Character:FindFirstChildWhichIsA('Humanoid')
            notify('Target Aim', 'Disabled', 3)
        else
            notify('Target Aim', 'Enabled', 3)
            if Target then
                notify('Target Aim', 'Target locked: ' .. Target.DisplayName, 3)
            end
        end
        dbgWarn('Target Aim toggled: ' .. tostring(state))
    end,
})

TargetAimSection:AddDropdown({
    Name = 'Target Part',
    Default = 'Head',
    Values = { 'Head', 'HumanoidRootPart' },
    Callback = function(value)
        TargetPart = value
        Settings.Aimpart = value
        if ViewEnabled and Target and Target.Character then
            local targetPart = Target.Character:FindFirstChild(TargetPart)
            if targetPart then
                CurrentCamera.CameraSubject = targetPart
            end
        end
        dbgWarn('Selected target part: ' .. tostring(value))
    end,
})

TargetAimSection:AddSlider({
    Name = 'Prediction Lead Strength',
    Min = 10,
    Max = 19,
    Default = 10,
    Callback = function(value)
        LeadStrength = value / 100
        Settings.Prediction = LeadStrength
        notify(
            'Target Aim',
            'Prediction lead strength set to: ' .. tostring(LeadStrength),
            3
        )
        dbgWarn('Prediction lead strength set to: ' .. tostring(LeadStrength))
    end,
})

TargetAimSection:AddButton({
    Name = 'Set Target Lock Key (Press a key after clicking)',
    Callback = function()
        local listening = true
        notify('Target Lock Key', 'Press a key to set...', 5)
        local connection
        connection = UserInputService.InputBegan:Connect(
            function(input, processed)
                if
                    processed
                    or input.UserInputType ~= Enum.UserInputType.Keyboard
                    or not listening
                then
                    return
                end
                listening = false
                Keybinds.TargetLock = input.KeyCode
                TargetLockKeyLabel.Text = 'Target Lock Key: '
                    .. input.KeyCode.Name
                dbgWarn('Target lock key set to: ' .. input.KeyCode.Name)
                connection:Disconnect()
            end
        )
    end,
})

TargetAimSection:AddToggle({
    Name = 'View Target',
    Default = false,
    Callback = function(state)
        ViewEnabled = state
        if state then
            notify('View Target', 'Enabled', 3)
            if Target and Target.Character then
                local targetPart = Target.Character:FindFirstChild(TargetPart)
                if targetPart then
                    CurrentCamera.CameraSubject = targetPart
                end
            end
        else
            notify('View Target', 'Disabled', 3)
            CurrentCamera.CameraSubject = Client.Character
                and Client.Character:FindFirstChildWhichIsA('Humanoid')
        end
        dbgWarn('View Target toggled: ' .. tostring(state))
    end,
})

TargetAimSection:AddToggle({
    Name = 'Rapid Fire',
    Default = false,
    Callback = function(state)
        RapidFireEnabled = state
        if state then
            notify('Rapid Fire', 'Enabled', 3)
        else
            notify('Rapid Fire', 'Disabled', 3)
            for tool, maid in pairs(GunMaids) do
                maid:Destroy()
                GunMaids[tool] = nil
                dbgWarn('Cleaned up Maid for ' .. tool.Name)
            end
            mouseHeld = false
        end
        dbgWarn('Rapid Fire toggled: ' .. tostring(state))
    end,
})

TargetAimSection:AddToggle({
    Name = 'Target All',
    Default = false,
    Callback = function(state)
        TargetAll = state
        if state then
            Target = nil
            notify('Target All', 'Enabled', 3)
        else
            notify('Target All', 'Disabled', 3)
        end
        dbgWarn('Target All toggled: ' .. tostring(state))
    end,
})

-- Target Visuals Section
TargetVisualsSection:AddToggle({
    Name = 'Tracer Enabled',
    Default = true,
    Callback = function(state)
        TracerEnabled = state
        if not state then
            Line.Visible = false
            notify('Target Visuals', 'Tracer disabled', 3)
        else
            notify('Target Visuals', 'Tracer enabled', 3)
        end
        dbgWarn('Tracer enabled toggled: ' .. tostring(state))
    end,
})

TargetVisualsSection:AddToggle({
    Name = 'Tracer RGB Effect',
    Default = false,
    Callback = function(state)
        TracerRGBEffectEnabled = state
        notify(
            'Target Visuals',
            state and 'Tracer RGB effect enabled'
                or 'Tracer RGB effect disabled',
            3
        )
        dbgWarn('Tracer RGB effect toggled: ' .. tostring(state))
    end,
})

TargetVisualsSection:AddToggle({
    Name = 'FOV Circle',
    Default = false,
    Callback = function(state)
        FOVEnabled = state
        if state then
            notify('Target Visuals', 'FOV circle enabled', 3)
        else
            Text.Visible = false
            notify('Target Visuals', 'FOV circle disabled', 3)
        end
        dbgWarn('FOV circle toggled: ' .. tostring(state))
    end,
})

TargetVisualsSection:AddToggle({
    Name = 'FOV RGB Effect',
    Default = false,
    Callback = function(state)
        FOVRGBEnabled = state
        notify(
            'Target Visuals',
            state and 'FOV RGB effect enabled' or 'FOV RGB effect disabled',
            3
        )
        dbgWarn('FOV RGB effect toggled: ' .. tostring(state))
    end,
})

TargetVisualsSection:AddSlider({
    Name = 'FOV Circle Size',
    Min = 20,
    Max = 200,
    Default = 60,
    Callback = function(value)
        Settings.FOVRadius = value
        Circle.Radius = value
        notify(
            'Target Visuals',
            'FOV circle size set to: ' .. tostring(value),
            3
        )
        dbgWarn('FOV circle size set to: ' .. tostring(value))
    end,
})

-- TP Walk Section
MovementSection:AddToggle({
    Name = 'TP Walk',
    Default = false,
    Callback = function(state)
        tpWalkEnabled = state
        if not state then
            tpwalking = false
            notify('TP Walk', 'Disabled', 3)
        else
            notify('TP Walk', 'Enabled', 3)
        end
        dbgWarn('TP Walk toggle set to: ' .. tostring(state))
    end,
})

MovementSection:AddButton({
    Name = 'Set TP Walk Key (Press a key after clicking)',
    Callback = function()
        local listening = true
        notify('TP Walk Key', 'Press a key to set...', 5)
        local connection
        connection = UserInputService.InputBegan:Connect(
            function(input, processed)
                if
                    processed
                    or input.UserInputType ~= Enum.UserInputType.Keyboard
                    or not listening
                then
                    return
                end
                listening = false
                Keybinds.TPWalk = input.KeyCode
                TPWalkKeyLabel.Text = 'TP Walk Key: ' .. input.KeyCode.Name
                dbgWarn('TP Walk key set to: ' .. input.KeyCode.Name)
                connection:Disconnect()
            end
        )
    end,
})

MovementSection:AddSlider({
    Name = 'TP Walk Speed',
    Min = 0,
    Max = 20,
    Default = 10,
    Callback = function(value)
        tpWalkSpeed = value
        notify('TP Walk', 'Speed set to: ' .. tostring(value), 3)
        dbgWarn('TP Walk Speed set to: ' .. tostring(value))
    end,
})

-- Get Closest Target
local function GetClosestTarget()
    local Closest, MinDist = nil, math.huge
    local MousePos = Vector2.new(Mouse.X, Mouse.Y)
    for _, Player in ipairs(Players:GetPlayers()) do
        if Player ~= Client and Player.Character then
            local Root = Player.Character:FindFirstChild('HumanoidRootPart')
            local Humanoid = Player.Character:FindFirstChild('Humanoid')
            local ISNTKNOCKED = Player.Character:FindFirstChild('BodyEffects')
                and Player.Character.BodyEffects['K.O'].Value ~= true
            local ISNTGRABBED = Player.Character:FindFirstChild(
                'GRABBING_COINSTRAINT'
            ) == nil
            if
                Root
                and Humanoid
                and Humanoid.Health > 1
                and ISNTKNOCKED
                and ISNTGRABBED
            then
                local screenPos, onScreen =
                    CurrentCamera:WorldToViewportPoint(Root.Position)
                if onScreen then
                    local Dist = (
                        Vector2.new(screenPos.X, screenPos.Y) - MousePos
                    ).Magnitude
                    if Dist < MinDist then
                        MinDist = Dist
                        Closest = Player
                    end
                end
            end
        end
    end
    return Closest
end

-- Keybind Handler
UserInputService.InputBegan:Connect(function(input, processed)
    if processed or input.UserInputType ~= Enum.UserInputType.Keyboard then
        return
    end
    -- Target Lock Key
    if input.KeyCode == Keybinds.TargetLock then
        if Target then
            notify('Target Aim', 'Target unlocked: ' .. Target.DisplayName, 3)
            Target = nil
            Line.Visible = false
            Circle.Visible = false
            Text.Visible = false
            currentText = ''
            textIndex = 1
            if ViewEnabled then
                CurrentCamera.CameraSubject = Client.Character
                    and Client.Character:FindFirstChildWhichIsA('Humanoid')
            end
            dbgWarn('Target unlocked via key: ' .. input.KeyCode.Name)
        else
            if BulletTPEnabled then
                Target = GetClosestTarget()
                if Target then
                    notify(
                        'Target Aim',
                        'Target locked: ' .. Target.DisplayName,
                        3
                    )
                    if ViewEnabled and Target.Character then
                        local targetPart =
                            Target.Character:FindFirstChild(TargetPart)
                        if targetPart then
                            CurrentCamera.CameraSubject = targetPart
                        end
                    end
                    dbgWarn(
                        'Target locked: '
                            .. Target.DisplayName
                            .. ' via key: '
                            .. input.KeyCode.Name
                    )
                else
                    notify('Target Aim', 'No target found', 3)
                    dbgWarn('No target found for lock')
                end
            else
                notify('Target Aim', 'Enable Target Aim to lock a target', 3)
                dbgWarn('Target Aim not enabled for locking')
            end
        end
    end
    -- Force Hit Key
    if input.KeyCode == Keybinds.ForceHit and ForceHitEnabled then
        if ForceHitTarget then
            notify(
                'Force Hit',
                'Target unlocked: ' .. ForceHitTarget.DisplayName,
                3
            )
            ForceHitTarget = nil
            removeTracer()
            dbgWarn('Force Hit target unlocked via key: ' .. input.KeyCode.Name)
        else
            ForceHitTarget = GetClosestTarget()
            if ForceHitTarget then
                notify(
                    'Force Hit',
                    'Target locked: ' .. ForceHitTarget.DisplayName,
                    3
                )
                createTracer()
                dbgWarn(
                    'Force Hit target locked: '
                        .. ForceHitTarget.DisplayName
                        .. ' via key: '
                        .. input.KeyCode.Name
                )
            else
                notify('Force Hit', 'No target found', 3)
                dbgWarn('No target found for Force Hit lock')
            end
        end
    end
    -- TP Walk Key
    if input.KeyCode == Keybinds.TPWalk and tpWalkEnabled then
        tpwalking = not tpwalking
        notify(
            'TP Walk',
            tpwalking and 'Enabled via keybind' or 'Disabled via keybind',
            3
        )
        dbgWarn(
            'TP Walk toggled via key: '
                .. input.KeyCode.Name
                .. ', State: '
                .. tostring(tpwalking)
        )
    end
end)

-- Mouse Input for Rapid Fire
UserInputService.InputBegan:Connect(function(input, gpe)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        local equippedGun = Client.Character
            and Client.Character:FindFirstChildOfClass('Tool')
        if equippedGun and GUN_NAMES[equippedGun.Name] then
            mouseHeld = true
            dbgWarn('Mouse held, gun equipped: ' .. equippedGun.Name)
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gpe)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        mouseHeld = false
        dbgWarn('Mouse released')
    end
end)

-- Detect Gun Unequip
Client.Character.ChildRemoved:Connect(function(child)
    if child:IsA('Tool') and GUN_NAMES[child.Name] then
        mouseHeld = false
        if GunMaids[child] then
            GunMaids[child]:Destroy()
            GunMaids[child] = nil
            PatchedGuns[child] = nil
            dbgWarn('Gun unequipped: ' .. child.Name .. ', cleaned up Maid')
        end
    end
end)

-- Beam Modification Logic
local recentShots = {}
local function addShot()
    local shotTime = tick()
    table.insert(recentShots, shotTime)
    for i = #recentShots, 1, -1 do
        if tick() - recentShots[i] > 3 then
            table.remove(recentShots, i)
        end
    end
end

local BeamConnections = {}
table.insert(
    BeamConnections,
    workspace.DescendantAdded:Connect(function(descendant)
        if not BeamVisualsEnabled or not descendant:IsA('Beam') then
            return
        end
        local isLocalPlayerBeam = false
        local debugReason = ''
        local character = Client.Character
        local equippedGun = character
            and character:FindFirstChildOfClass('Tool')
        if descendant.Attachment0 or descendant.Attachment1 then
            local beamPart = descendant.Attachment0
                    and descendant.Attachment0.Parent
                or descendant.Attachment1 and descendant.Attachment1.Parent
            if
                beamPart
                and (
                    beamPart:IsDescendantOf(character)
                    or (equippedGun and beamPart:IsDescendantOf(equippedGun))
                )
            then
                isLocalPlayerBeam = true
            else
                debugReason = debugReason
                    .. 'Attachment not linked to Character/Tool; '
            end
        end
        if
            not isLocalPlayerBeam
            and descendant.Attachment0
            and character
            and character:FindFirstChild('HumanoidRootPart')
        then
            local rootPos = character.HumanoidRootPart.Position
            local attachPos = descendant.Attachment0.WorldPosition
            local distance = (rootPos - attachPos).Magnitude
            if distance < 10 then
                isLocalPlayerBeam = true
            else
                debugReason = debugReason
                    .. 'Attachment0 too far: '
                    .. distance
                    .. ' studs; '
            end
        end
        if isLocalPlayerBeam then
            task.spawn(function()
                task.wait(0.01)
                if descendant.Parent then
                    local beamColor = TracerRGBEffectEnabled
                            and Color3.fromHSV((tick() % 5) / 5, 1, 1)
                        or BeamColor
                    descendant.Color = ColorSequence.new(beamColor)
                    descendant.Width0 = 0.3
                    descendant.Width1 = 0.3
                    descendant.Texture = 'rbxassetid://243737654'
                    descendant.Transparency = NumberSequence.new({
                        NumberSequenceKeypoint.new(0, 0.1),
                        NumberSequenceKeypoint.new(1, 0.3),
                    })
                    descendant.TextureSpeed = 4
                    descendant.LightEmission = 1
                    dbgWarn(
                        'Beam modified: Name='
                            .. descendant.Name
                            .. ', Color='
                            .. tostring(beamColor)
                    )
                end
            end)
        else
            dbgWarn(
                'Non-LocalPlayer Beam ignored: '
                    .. descendant.Name
                    .. ', Reason='
                    .. debugReason
            )
        end
    end)
)

-- Tracer, FOV, and Text Animation
RunService.Heartbeat:Connect(function()
    if Target and BulletTPEnabled and TracerEnabled then
        local targetPart = Target.Character
            and Target.Character:FindFirstChild(Settings.Aimpart)
        if targetPart then
            local predictedPos = targetPart.Position
                + (targetPart.Velocity * Settings.Prediction)
            local vector, onScreen =
                CurrentCamera:WorldToViewportPoint(predictedPos)
            local cameraPos = CurrentCamera.CFrame.Position
            local direction = (predictedPos - cameraPos).Unit
            local forward = CurrentCamera.CFrame.LookVector
            local dot = direction:Dot(forward)
            local screenPos
            if dot < 0 then
                local screenWidth = CurrentCamera.ViewportSize.X
                local screenHeight = CurrentCamera.ViewportSize.Y
                local aspectRatio = screenWidth / screenHeight
                local fov = CurrentCamera.FieldOfView
                local tanFov = math.tan(math.rad(fov / 2))
                local cameraRight = CurrentCamera.CFrame.RightVector
                local cameraUp = CurrentCamera.CFrame.UpVector
                local x = direction:Dot(cameraRight)
                    / (direction:Dot(forward) * tanFov * aspectRatio)
                local y = direction:Dot(cameraUp)
                    / (direction:Dot(forward) * tanFov)
                local clampX = math.clamp(x, -1, 1) * screenWidth / 2
                    + screenWidth / 2
                local clampY = math.clamp(y, -1, 1) * screenHeight / 2
                    + screenHeight / 2
                screenPos = Vector2.new(clampX, clampY + Inset)
            else
                screenPos = Vector2.new(vector.X, vector.Y)
            end
            local tracerColor = TracerRGBEffectEnabled
                    and Color3.fromHSV((tick() % 5) / 5, 1, 1)
                or Settings.Color
            Line.Color = tracerColor
            Line.Transparency = Settings.Transparency
            Line.Thickness = Settings.Thickness
            Line.From = Vector2.new(Mouse.X, Mouse.Y + Inset)
            Line.To = screenPos
            Line.Visible = true
        else
            Line.Visible = false
        end
    else
        Line.Visible = false
    end
    if FOVEnabled then
        local fovColor = FOVRGBEnabled
                and Color3.fromHSV((tick() % 5) / 5, 1, 1)
            or Color3.fromRGB(255, 255, 255)
        Circle.Position = Vector2.new(Mouse.X, Mouse.Y + Inset)
        Circle.Visible = true
        Circle.Thickness = Settings.FOVThickness
        Circle.Radius = Settings.FOVRadius
        Circle.Color = fovColor
        if BulletTPEnabled and Target and Target.Character then
            local targetName = Target.DisplayName or ''
            if tick() - lastTextUpdate >= textUpdateDelay then
                if textIndex <= #targetName then
                    currentText = string.sub(targetName, 1, textIndex)
                    textIndex = textIndex + 1
                else
                    textIndex = 1
                    currentText = ''
                end
                lastTextUpdate = tick()
            end
            Text.Text = currentText
            Text.Size = 16
            Text.Color = fovColor
            Text.Position =
                Vector2.new(Mouse.X, Mouse.Y + Inset + Settings.FOVRadius + 10)
            Text.Visible = true
            Text.Center = true
            Text.Outline = true
        else
            Text.Visible = false
            currentText = ''
            textIndex = 1
        end
    else
        Circle.Visible = false
        Text.Visible = false
        currentText = ''
        textIndex = 1
    end
    if ForceHitEnabled then
        updateTracer()
    end
end)

-- Auto Shoot Loop for Force Hit
local shootCooldown, lastShoot = 0.02, 0
RunService.Heartbeat:Connect(function()
    if ForceHitEnabled and ForceHitTarget then
        if tick() - lastShoot >= shootCooldown then
            fireGun()
            lastShoot = tick()
        end
    end
end)

-- TP Walk Logic
RunService.Heartbeat:Connect(function(delta)
    if tpWalkEnabled and tpwalking then
        local chr = Client.Character
        local hum = chr and chr:FindFirstChildWhichIsA('Humanoid')
        local root = chr and chr:FindFirstChild('HumanoidRootPart')
        if chr and hum and root and hum.MoveDirection.Magnitude > 0 then
            local success, err = pcall(function()
                root.CFrame = root.CFrame
                    + (hum.MoveDirection * tpWalkSpeed * delta * 10)
            end)
            if not success then
                local targetPos = root.Position
                    + (hum.MoveDirection * tpWalkSpeed * delta * 10)
                hum:MoveTo(targetPos)
                dbgWarn(
                    'TP Walk CFrame failed, using MoveTo: ' .. tostring(err)
                )
            else
                dbgWarn(
                    'TP Walk applied: Moved by '
                        .. tostring(
                            hum.MoveDirection * tpWalkSpeed * delta * 10
                        )
                )
            end
        else
            dbgWarn(
                'TP Walk failed: Character='
                    .. tostring(chr)
                    .. ', Humanoid='
                    .. tostring(hum)
                    .. ', Root='
                    .. tostring(root)
            )
        end
    end
end)

-- Prediction Function
local function PredictPosition(targetPart, bulletSpeed)
    if not targetPart or not targetPart:IsDescendantOf(workspace) then
        return targetPart and targetPart.Position or Vector3.zero
    end
    local char = Client.Character
    local hrp = char and char:FindFirstChild('HumanoidRootPart')
    if not hrp then
        return targetPart.Position
    end
    local playerPos = hrp.Position
    local targetPos = targetPart.Position
    local targetVel = targetPart.Velocity
    local r = targetPos - playerPos
    local v = targetVel
    local s = bulletSpeed
    local a = v:Dot(v) - (s * s)
    local b = 2 * r:Dot(v)
    local c = r:Dot(r)
    local t
    local EPS = 1e-6
    if math.abs(a) < EPS then
        if math.abs(b) < EPS then
            return targetPos
        end
        t = -c / b
    else
        local disc = b * b - 4 * a * c
        if disc < 0 then
            return targetPos
        end
        local sqrtDisc = math.sqrt(disc)
        local t1 = (-b - sqrtDisc) / (2 * a)
        local t2 = (-b + sqrtDisc) / (2 * a)
        t = (t1 > 0 and t1) or (t2 > 0 and t2) or nil
    end
    if not t or t <= 0 or t > 3 then
        return targetPos
    end
    local predicted = targetPos + v * t
    predicted = targetPos:Lerp(predicted, LeadStrength)
    local ping = 0.08
    local ok, p = pcall(function()
        return Client:GetNetworkPing()
    end)
    if ok and type(p) == 'number' then
        ping = p
    end
    ping = math.clamp(ping, 0.05, 0.5)
    predicted += v * ping
    if v.Magnitude > 0 then
        predicted += v.Unit * 0.1
    end
    return predicted
end

-- Bullet Hook for Target Aim
local function InstallBulletHook()
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    local previous = mt.__index
    local function hook(self, key)
        local ok, result = pcall(function()
            if
                not checkcaller()
                and self == Mouse
                and BulletTPEnabled
                and not RapidFireEnabled
                and not TargetAll
                and Target
                and (
                    key == 'Hit'
                    or (key == 'Target' and game.PlaceId == 2788229376)
                )
            then
                local part = Target.Character
                    and Target.Character:FindFirstChild(TargetPart)
                if part then
                    local pos = PredictPosition(part, BulletSpeed)
                    if typeof(pos) == 'Vector3' then
                        return CFrame.new(pos)
                    end
                end
            end
            return previous(self, key)
        end)
        if ok then
            return result
        else
            return previous(self, key)
        end
    end
    local newIndex = newcclosure(hook)
    mt.__index = newIndex
    setreadonly(mt, true)
    return newIndex
end

local currentMouseIndex = InstallBulletHook()
task.spawn(function()
    while true do
        task.wait(0.25)
        local success, mt = pcall(getrawmetatable, game)
        if success and mt then
            local success_index, index = pcall(function()
                return mt.__index
            end)
            if success_index and index and index ~= currentMouseIndex then
                dbgWarn('Watchdog detected __index change, reinstalling hook')
                currentMouseIndex = InstallBulletHook()
            end
        end
    end
end)

-- Wallbang Module
local function applyWallbang()
    local success, err = pcall(function()
        local Handler = ReplicatedStorage:FindFirstChild('MainModule')
        if not Handler then
            error('MainModule not found in ReplicatedStorage')
        end
        local Module = require(Handler)
        Module.Ignored = {
            workspace:WaitForChild('Vehicles'),
            workspace:WaitForChild('MAP'),
            workspace:WaitForChild('Ignored'),
        }
        dbgWarn('Wallbang applied: Ignored Vehicles, MAP, Ignored')
    end)
    if not success then
        dbgWarn('Wallbang error: ' .. tostring(err))
    end
end

-- Hook GunHandler Shoot
local function hookGunHandlerShoot()
    local success, err = pcall(function()
        local gunHandler =
            require(ReplicatedStorage.Modules:WaitForChild('GunHandler'))
        local oldShoot = gunHandler.shoot
        gunHandler.shoot = function(args)
            if RapidFireEnabled or TargetAll then
                args.Range = RapidFire.InfiniteRange
                dbgWarn(
                    'Forced Range='
                        .. RapidFire.InfiniteRange
                        .. ' in gunHandler.shoot'
                )
            end
            return oldShoot(args)
        end
    end)
    if not success then
        dbgWarn('Error hooking GunHandler: ' .. tostring(err))
    end
end

task.spawn(function()
    applyWallbang()
    hookGunHandlerShoot()
end)

-- Rapid Fire Logic
local function randomVector3(maxOffset)
    return Vector3.new(
        (math.random() - 0.5) * 2 * maxOffset,
        (math.random() - 0.5) * 2 * maxOffset,
        (math.random() - 0.5) * 2 * maxOffset
    )
end

local function patchGun(tool)
    if not GUN_NAMES[tool.Name] or PatchedGuns[tool] then
        return
    end
    PatchedGuns[tool] = true
    local ammo = tool:WaitForChild('Ammo')
    local handle = tool:WaitForChild('Handle')
    local gunHandler =
        require(ReplicatedStorage.Modules:WaitForChild('GunHandler'))
    local remote = tool:WaitForChild('RemoteEvent')
    local range = tool:WaitForChild('Range')
    local maid = require(ReplicatedStorage.Modules.Maid).new()
    GunMaids[tool] = maid

    applyWallbang()

    task.spawn(function()
        while tool.Parent and tool.Parent == Client.Character do
            local success, err = pcall(function()
                ammo.Value = RapidFire.InfiniteAmmo
                range.Value = RapidFire.InfiniteRange
                dbgWarn(
                    'Set '
                        .. tool.Name
                        .. ' Ammo='
                        .. ammo.Value
                        .. ', Range='
                        .. range.Value
                )
            end)
            if not success then
                dbgWarn(
                    'Error setting ammo/range for '
                        .. tool.Name
                        .. ': '
                        .. tostring(err)
                )
            end
            task.wait(0.1)
        end
        maid:Destroy()
        GunMaids[tool] = nil
        PatchedGuns[tool] = nil
        dbgWarn(
            'Gun ' .. tool.Name .. ' unequipped or removed, cleaned up Maid'
        )
    end)

    maid:GiveTask(RunService.Heartbeat:Connect(function()
        if
            not (RapidFireEnabled or TargetAll)
            or not mouseHeld
            or ammo.Value <= 0
            or tool.Parent ~= Client.Character
        then
            return
        end
        local success, err = pcall(function()
            range.Value = RapidFire.InfiniteRange
            applyWallbang()
            local muzzle = tool:FindFirstChild('Default')
                and tool.Default:FindFirstChild('Mesh')
                and tool.Default.Mesh:FindFirstChild('Muzzle')
            local position = muzzle and muzzle.WorldPosition
                or handle.CFrame.Position
            if TargetAll then
                for _, p in pairs(Players:GetPlayers()) do
                    if
                        p ~= LocalPlayer
                        and p.Character
                        and p.Character:FindFirstChild(TargetPart)
                    then
                        local targetPart =
                            p.Character:FindFirstChild(TargetPart)
                        for i = 1, RapidFire.BulletsPerShot do
                            local targetPos =
                                PredictPosition(targetPart, BulletSpeed)
                            local aimOffset =
                                randomVector3(RapidFire.SpreadAmount)
                            local finalPos = targetPos + aimOffset
                            pcall(function()
                                setidentity(2)
                            end)
                            local vShoot, v2, v3 = gunHandler.shoot({
                                Shooter = LocalPlayer.Character,
                                Handle = handle,
                                ForcedOrigin = position,
                                AimPosition = finalPos,
                                BeamColor = Color3.new(1, 0.545, 0.149),
                                Range = RapidFire.InfiniteRange,
                            })
                            pcall(function()
                                setidentity(8)
                            end)
                            addShot()
                            if HitChamsEnabled then
                                createHitCham(p.Character)
                            end
                            ReplicatedStorage.MainRemotes.MainRemoteEvent:FireServer(
                                'ShootGun',
                                handle,
                                position,
                                vShoot,
                                v2,
                                v3
                            )
                            remote:FireServer('Shoot')
                            dbgWarn(
                                'Target All shot at '
                                    .. p.Name
                                    .. ', AimPosition='
                                    .. tostring(finalPos)
                            )
                        end
                    end
                end
            elseif
                RapidFireEnabled
                and Target
                and Target.Character
                and Target.Character:FindFirstChild(TargetPart)
            then
                for i = 1, RapidFire.BulletsPerShot do
                    local targetPos = PredictPosition(
                        Target.Character:FindFirstChild(TargetPart),
                        BulletSpeed
                    )
                    local aimOffset = randomVector3(RapidFire.SpreadAmount)
                    local finalPos = targetPos + aimOffset
                    pcall(function()
                        setidentity(2)
                    end)
                    local vShoot, v2, v3 = gunHandler.shoot({
                        Shooter = LocalPlayer.Character,
                        Handle = handle,
                        ForcedOrigin = position,
                        AimPosition = finalPos,
                        BeamColor = Color3.new(1, 0.545, 0.149),
                        Range = RapidFire.InfiniteRange,
                    })
                    pcall(function()
                        setidentity(8)
                    end)
                    addShot()
                    if HitChamsEnabled then
                        createHitCham(Target.Character)
                    end
                    ReplicatedStorage.MainRemotes.MainRemoteEvent:FireServer(
                        'ShootGun',
                        handle,
                        position,
                        vShoot,
                        v2,
                        v3
                    )
                    remote:FireServer('Shoot')
                    dbgWarn(
                        'Rapid Fire shot at '
                            .. Target.Name
                            .. ', AimPosition='
                            .. tostring(finalPos)
                    )
                end
            elseif RapidFireEnabled then
                for i = 1, RapidFire.BulletsPerShot do
                    local aimOffset = randomVector3(RapidFire.SpreadAmount)
                    local targetPos = position
                        + gunHandler.getAim(position) * RapidFire.InfiniteRange
                        + aimOffset
                    pcall(function()
                        setidentity(2)
                    end)
                    local vShoot, v2, v3 = gunHandler.shoot({
                        Shooter = LocalPlayer.Character,
                        Handle = handle,
                        ForcedOrigin = position,
                        AimPosition = targetPos,
                        BeamColor = Color3.new(1, 0.545, 0.149),
                        Range = RapidFire.InfiniteRange,
                    })
                    pcall(function()
                        setidentity(8)
                    end)
                    addShot()
                    ReplicatedStorage.MainRemotes.MainRemoteEvent:FireServer(
                        'ShootGun',
                        handle,
                        position,
                        vShoot,
                        v2,
                        v3
                    )
                    remote:FireServer('Shoot')
                    dbgWarn(
                        'Rapid Fire mouse shot, AimPosition='
                            .. tostring(targetPos)
                    )
                end
            end
        end)
        if not success then
            dbgWarn('Firing error for ' .. tool.Name .. ': ' .. tostring(err))
        end
    end))

    notify(
        'Rapid Fire',
        'Patched ' .. tool.Name .. ' for Rapid Fire + Infinite Ammo',
        3
    )
    dbgWarn('Patched ' .. tool.Name .. ' for Rapid Fire')
    return maid
end

-- Auto Patch New Guns
Client.Backpack.ChildAdded:Connect(function(child)
    if GUN_NAMES[child.Name] then
        task.wait(0.1)
        patchGun(child)
    end
end)

-- Patch Existing Gun
local equippedGun = Client.Character
    and Client.Character:FindFirstChildOfClass('Tool')
if equippedGun and GUN_NAMES[equippedGun.Name] then
    patchGun(equippedGun)
end

-- Shared Script Label
local MAIN_USERID = 3164536831

local scriptUserFlag = Instance.new('BoolValue')
scriptUserFlag.Name = 'ScriptUser'
scriptUserFlag.Value = true
scriptUserFlag.Parent = LocalPlayer

local function addLabel(player)
    if
        LocalPlayer.UserId == MAIN_USERID
        and player ~= LocalPlayer
        and player:FindFirstChild('ScriptUser')
        and player.Character
        and player.Character:FindFirstChild('Head')
    then
        local head = player.Character.Head
        if head:FindFirstChild('AltUserLabel') then
            return
        end
        local billboard = Instance.new('BillboardGui')
        billboard.Name = 'AltUserLabel'
        billboard.Adornee = head
        billboard.Size = UDim2.new(4, 0, 1, 0)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true

        local textLabel = Instance.new('TextLabel')
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = 'Alt User'
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        textLabel.TextScaled = false
        textLabel.TextSize = 24
        textLabel.Font = Enum.Font.SourceSansBold
        textLabel.Parent = billboard

        billboard.Parent = head
    elseif
        LocalPlayer.UserId ~= MAIN_USERID
        and LocalPlayer:FindFirstChild('ScriptUser')
        and player.UserId == MAIN_USERID
        and player.Character
        and player.Character:FindFirstChild('Head')
    then
        local head = player.Character.Head
        if head:FindFirstChild('OwnerLabel') then
            return
        end
        local billboard = Instance.new('BillboardGui')
        billboard.Name = 'OwnerLabel'
        billboard.Adornee = head
        billboard.Size = UDim2.new(4, 0, 1, 0)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true

        local textLabel = Instance.new('TextLabel')
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = 'Owner'
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        textLabel.TextScaled = false
        textLabel.TextSize = 24
        textLabel.Font = Enum.Font.SourceSansBold
        textLabel.Parent = billboard

        billboard.Parent = head
    end
end

local function removeLabel(player)
    if player.Character and player.Character:FindFirstChild('Head') then
        local head = player.Character.Head
        if
            LocalPlayer.UserId == MAIN_USERID
            and head:FindFirstChild('AltUserLabel')
        then
            head.AltUserLabel:Destroy()
        elseif
            LocalPlayer.UserId ~= MAIN_USERID
            and LocalPlayer:FindFirstChild('ScriptUser')
            and head:FindFirstChild('OwnerLabel')
        then
            head.OwnerLabel:Destroy()
        end
    end
end

local function updateLabels()
    if not LocalPlayer:FindFirstChild('ScriptUser') then
        return
    end
    for _, player in ipairs(Players:GetPlayers()) do
        if
            (
                LocalPlayer.UserId == MAIN_USERID
                and player ~= LocalPlayer
                and player:FindFirstChild('ScriptUser')
            )
            or (
                LocalPlayer.UserId ~= MAIN_USERID
                and player.UserId == MAIN_USERID
            )
        then
            addLabel(player)
        else
            removeLabel(player)
        end
    end
end

if LocalPlayer:FindFirstChild('ScriptUser') then
    RunService.Heartbeat:Connect(updateLabels)
    Players.PlayerAdded:Connect(updateLabels)
    Players.PlayerRemoving:Connect(updateLabels)
end

LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1)
    local newFlag = Instance.new('BoolValue')
    newFlag.Name = 'ScriptUser'
    newFlag.Value = true
    newFlag.Parent = LocalPlayer
    updateLabels()
end)

updateLabels()
